diff --git a/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientHandler.java b/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientHandler.java
index dc7bf5c..be42eb5 100644
--- a/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientHandler.java
+++ b/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientHandler.java
@@ -11,12 +11,12 @@ package com.johannes.lsctic.amiapi;
  */
 import com.johannes.lsctic.FXMLController;
 import com.johannes.lsctic.fields.HistoryField;
+import com.johannes.lsctic.fields.InternField;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStreamReader;
+
 import java.util.Date;
+import java.util.Map;
 import java.util.logging.Logger;
 
 /**
@@ -24,8 +24,10 @@ import java.util.logging.Logger;
  */
 public class SecureChatClientHandler extends SimpleChannelInboundHandler<String> {
     private final FXMLController fxml;
-    public SecureChatClientHandler(FXMLController fxml) {
+    private final Map<String, InternField> internNumbers;
+    public SecureChatClientHandler(FXMLController fxml,Map<String, InternField> internNumbers) {
         this.fxml = fxml;
+        this.internNumbers = internNumbers;
     }
     @Override
     public void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {
diff --git a/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientInitializer.java b/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientInitializer.java
index 994c834..03faf0d 100644
--- a/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientInitializer.java
+++ b/src/main/java/com/johannes/lsctic/amiapi/SecureChatClientInitializer.java
@@ -6,6 +6,7 @@
 package com.johannes.lsctic.amiapi;
 
 import com.johannes.lsctic.FXMLController;
+import com.johannes.lsctic.fields.InternField;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.socket.SocketChannel;
@@ -14,6 +15,7 @@ import io.netty.handler.codec.Delimiters;
 import io.netty.handler.codec.string.StringDecoder;
 import io.netty.handler.codec.string.StringEncoder;
 import io.netty.handler.ssl.SslContext;
+import java.util.Map;
 
 /**
  * Creates a newly configured {@link ChannelPipeline} for a new channel.
@@ -22,10 +24,12 @@ public class SecureChatClientInitializer extends ChannelInitializer<SocketChanne
 
     private final SslContext sslCtx;
     private final FXMLController fxml;
+    private final Map<String, InternField> internNumbers;
 
-    public SecureChatClientInitializer(SslContext sslCtx, FXMLController fxml) {
+    public SecureChatClientInitializer(SslContext sslCtx, FXMLController fxml,Map<String, InternField> internNumbers) {
         this.sslCtx = sslCtx;
         this.fxml = fxml;
+        this.internNumbers = internNumbers;
     }
 
     @Override
@@ -45,6 +49,6 @@ public class SecureChatClientInitializer extends ChannelInitializer<SocketChanne
         pipeline.addLast(new StringEncoder());
 
         // and then business logic.
-        pipeline.addLast(new SecureChatClientHandler(fxml));
+        pipeline.addLast(new SecureChatClientHandler(fxml, internNumbers));
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/johannes/lsctic/amiapi/ServerConnectionHandler.java b/src/main/java/com/johannes/lsctic/amiapi/ServerConnectionHandler.java
index 3cc20f7..87caeb2 100644
--- a/src/main/java/com/johannes/lsctic/amiapi/ServerConnectionHandler.java
+++ b/src/main/java/com/johannes/lsctic/amiapi/ServerConnectionHandler.java
@@ -33,6 +33,8 @@ public class ServerConnectionHandler {
     private final Map<String, InternField> internNumbers;
     private final FXMLController fcont;
     public ServerConnectionHandler(Map<String, InternField> internNumbers, FXMLController fcont) throws IOException {
+        this.internNumbers = internNumbers;
+             this.fcont = fcont;
          try {
              final SslContext sslCtx = SslContextBuilder.forClient()
                      .trustManager(InsecureTrustManagerFactory.INSTANCE).build();
@@ -42,7 +44,7 @@ public class ServerConnectionHandler {
              Bootstrap b = new Bootstrap();
              b.group(group)
                      .channel(NioSocketChannel.class)
-                     .handler(new SecureChatClientInitializer(sslCtx,  fcont));
+                     .handler(new SecureChatClientInitializer(sslCtx,  fcont, internNumbers));
              
              // Start the connection attempt.
              ch = b.connect(ADRESSE, PORT).sync().channel();
@@ -60,8 +62,7 @@ public class ServerConnectionHandler {
          } catch (InterruptedException ex) {
              Logger.getLogger(ServerConnectionHandler.class.getName()).log(Level.SEVERE, null, ex);
          }
-         this.internNumbers = internNumbers;
-             this.fcont = fcont;
+         
     }
     public void sendBack(String msg) {
          ChannelFuture lastWriteFuture = ch.writeAndFlush(msg + "\r\n");
